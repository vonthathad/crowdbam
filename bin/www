#!/usr/bin/env node

/**
 * Module dependencies.
 */
process.env.NODE_ENV = process.env.NODE_ENV || 'development';
process.env.DOMAIN = process.env.DOMAIN || 'crowdbam.com';
process.env.PORT = process.env.PORT || '8235';
process.env.PROTOCOL = process.env.PROTOCOL || 'http';
process.env.CHANNEL = process.env.CHANNEL || 'www';
var debug = require('debug')('docs:server');
var http = require('http');
var mongoose = require('../app/configs/mongoose');
var server;
var port
/**
 * Get port from environment and store in Express.
 */



/**
 * Create HTTP server.
 */
mongoose(function(){
  var app = require('../app');
  port = process.env.PORT || '8000';
  app.set('port', port);
  server = http.createServer(app);
  /**
   * Listen on provided port, on all network interfaces.
   */
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
  var passport = require('../app/configs/passport')();
});




/**
 * Normalize a port into a number, string, or false.
 */

// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
